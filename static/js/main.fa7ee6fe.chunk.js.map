{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLocaleLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAQaA,EAAwB,SAACC,GACpC,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJXC,EAA4B,SAACR,GACxC,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GACnB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJrBO,G,MAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxC,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCoC/DG,E,kDA7Bb,WAAYhB,GAAe,IAAD,8BACxB,cAAMA,IACDiB,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJS,E,qDAQ1B,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,oBAG/C,WAAU,IAAD,SAC2BE,KAAKR,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZQ,EAAmBjB,EAASkB,QAAO,SAACxB,GAAD,OACvCA,EAAQG,KAAKsB,oBAAoBC,SAASX,EAAYU,wBAExD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAc,SAACiB,GAAD,OAAO,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WACpG,cAAC,EAAD,CAAUvB,SAAUiB,W,GAxBVO,aCFHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fa7ee6fe.chunk.js","sourcesContent":["import React from 'react';\nimport { Monster } from '../../App';\nimport './card.styles.css';\n\ninterface Props {\n  monster: Monster;\n}\n\nexport const Card: React.FC<Props> = (props) => {\n  return (\n    <div className='card-container'>\n      <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt='monster' />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\nimport { Monster } from '../../App';\n\ninterface Props {\n  monsters: Monster[];\n}\n\nexport const CardList: React.FC<Props> = (props) => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map((monster) => {\n        return <Card key={monster.id} monster={monster} />;\n      })}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './search-box.styles.css';\n\ninterface Props {\n  placeholder: string;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchBox: React.FC<Props> = ({ placeholder, handleChange }) => (\n  <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\ninterface Props {}\nexport interface Monster {\n  id: number;\n  name: string;\n  email: string;\n}\nexport interface State {\n  monsters: Monster[];\n  searchField: string;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex!</h1>\n        <SearchBox placeholder='search-monsters' handleChange={(e) => this.setState({ searchField: e.target.value })} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}